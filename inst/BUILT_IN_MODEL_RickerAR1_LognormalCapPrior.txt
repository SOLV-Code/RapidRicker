model{

# This is a BUGS version of the Ricker model fit with lag-1 autoregression correction (AR1) and associated benchmarks. 
# The code is modified from code by Catherine Michielsens and expanded for AR1 based on Eq21 and 22 of 
# Fleischman and Evenson (2010; ADFG FMS10-04). 
	# modifications based on comments and code samples from Ann-Marie Huang, Brendan Connors, Charmaine
	# Carr-Harris, and Wendell Challenger.


# do first year    
R_Obs[1] ~ dlnorm(logR[1],tau_R)    
logR[1] <- log(S[1]) + RS[1]    
RS[1] <- ln.alpha - beta * S[1] + phi * log.resid.0    

# do second year    
R_Obs[2] ~ dlnorm(logR[2],tau_R)    
logR[2] <- log(S[2]) + RS[2]     
RS[2] <- ln.alpha - beta * S[2] + phi * log.resid[1]    
log.resid[1] <-  log(R_Obs[1]) - logR[1]    

#loop over rext of N sample points (starting with the third)    

for (i in 2:N) { 
log.resid[i] <-  log(R_Obs[i]) - logR[i] 
}


for (i in 3:N) {       
R_Obs[i] ~ dlnorm(logR[i],tau_R)  # likelihood 
logR[i] <- log(S[i]) + RS[i]      
RS[i] <- ln.alpha - beta * S[i] + phi * log.resid[i-1] 
} 

ln.alpha ~ dnorm(p.alpha,tau_alpha)            #prior for ln.alpha     
beta <-1/S.max    # prior for beta     

S.max ~ dlnorm(smax.in, tau_smax) T(0,smax.limit)
smax.limit <- max.scalar * smax.in # typical default  3 * (Max Obs)

# non-updating samples (so can plot priors)
S.max.prior ~ dlnorm(smax.in, tau_smax) T(0,smax.limit)
ln.alpha.prior ~ dnorm(p.alpha,tau_alpha)

tau_R ~ dgamma(shape.tau_R,lambda_tau_R)    #prior for precision parameter     
sigma <- 1/sqrt(tau_R)   # based on Fleishman and Evenson (2010; ADFG FMS10-04)

# OLD phi ~ dnorm(0,0.0001) #T(-1,1) # AR1 priors as per Fleishman and Evenson AppA2  
# crashed with "Error in node phi. Slicer stuck at value with infinite density "
# Seems to be if node gets stuck on 0? (see: https://stackoverflow.com/questions/47135726/error-slicer-stuck-at-value-with-infinite-density-running-binomial-beta-model)
# works if bounds are commented out... -> need to investigate

phi ~ dnorm(0.5,0.0001) #T(0.0001,0.9999)
log.resid.0 ~ dnorm(0,tau.red) #T(-3,3)  
tau.red <- tau.white * (1-phi*phi)     
tau.white ~ dgamma(shape.tauw,lambda_tauw)    
       
ln.alpha.c <- ln.alpha + ((sigma * sigma) / (2 * (1-phi*phi)) ) # bias correction for lognormal skewness


}